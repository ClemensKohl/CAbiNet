% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CA.R
\name{cacontainer,matrix-method}
\alias{cacontainer,matrix-method}
\alias{cacontainer,dgCMatrix-method}
\alias{cacontainer,Seurat-method}
\alias{cacontainer,SingleCellExperiment-method}
\title{Correspondance Analysis for Seurat objects}
\usage{
\S4method{cacontainer}{matrix}(
  obj,
  coords = TRUE,
  princ_coords = 3,
  python = FALSE,
  dims = NULL,
  top = 5000,
  inertia = TRUE,
  rm_zeros = TRUE,
  residuals = "pearson",
  ...
)

\S4method{cacontainer}{dgCMatrix}(
  obj,
  coords = TRUE,
  princ_coords = 3,
  python = FALSE,
  dims = NULL,
  top = 5000,
  inertia = TRUE,
  rm_zeros = TRUE,
  residuals = "pearson",
  ...
)

\S4method{cacontainer}{Seurat}(
  obj,
  coords = TRUE,
  princ_coords = 3,
  python = FALSE,
  dims = NULL,
  top = 5000,
  inertia = TRUE,
  rm_zeros = TRUE,
  residuals = "pearson",
  ...,
  assay = Seurat::DefaultAssay(obj),
  slot = "counts",
  return_input = FALSE
)

\S4method{cacontainer}{SingleCellExperiment}(
  obj,
  coords = TRUE,
  princ_coords = 3,
  python = FALSE,
  dims = NULL,
  top = 5000,
  inertia = TRUE,
  rm_zeros = TRUE,
  residuals = "pearson",
  ...,
  assay = "counts",
  return_input = FALSE
)
}
\arguments{
\item{...}{Other parameters}

\item{assay}{Character. The assay from which extract the count matrix for 
SVD, e.g. "RNA" for Seurat objects or "counts"/"logcounts" for 
SingleCellExperiments.}

\item{slot}{character. The slot of the Seurat assay. Default "counts".}

\item{return_input}{Logical. If TRUE returns the input 
(SingleCellExperiment/Seurat object) with the CA results saved in the 
reducedDim/DimReduc slot "CA".
 Otherwise returns a "cacomp". Default FALSE.}
}
\value{
If return_imput = TRUE with Seurat container: Returns input obj of class 
"Seurat" with a new Dimensional Reduction Object named "CA".
Standard coordinates of the cells are saved as embeddings,
the principal coordinates of the genes as loadings and
the singular values (= square root of principal intertias/eigenvalues)
are stored as stdev.
To recompute a regular "cacomp" object without rerunning cacomp use 
`as.cacomp()`.

If return_input =TRUE for SingleCellExperiment input returns a 
SingleCellExperiment object with a matrix of standardized coordinates of 
the columns in
reducedDim(obj, "CA"). Additionally, the matrix contains the following 
attributes:
"prin_coords_rows": Principal coordinates of the rows.
"singval": Singular values. For the explained inertia of each principal 
axis calculate singval^2.
"percInertia": Percent explained inertia of each principal axis.
To recompute a regular "cacomp" object from a SingleCellExperiment without 
rerunning cacomp use `as.cacomp()`.
}
\description{
`cacomp.seurat` performs correspondence analysis on an assay from a Seurat 
container and stores the standardized coordinates of the columns (= cells) 
and the principal coordinates of the rows (= genes) as a DimReduc Object in 
the Seurat container.

`cacomp.SingleCellExperiment` performs correspondence analysis on an assay 
from a SingleCellExperiment and stores the standardized coordinates
 of the columns (= cells) and the principal coordinates of the rows 
 (= genes) as a matrix in the SingleCellExperiment container.
}
\examples{

###########
# Seurat  #
###########
library(Seurat)
set.seed(1234)

# Simulate counts
cnts <- mapply(function(x){rpois(n = 500, lambda = x)},
                     x = sample(1:20, 50, replace = TRUE))
rownames(cnts) <- paste0("gene_", 1:nrow(cnts))
colnames(cnts) <- paste0("cell_", 1:ncol(cnts))

# Create Seurat object
seu <- CreateSeuratObject(counts = cnts)

# Run CA and save in dim. reduction slot
seu <- cacomp(seu, return_input = TRUE, assay = "RNA", slot = "counts")

# Run CA and return cacomp object
ca <- cacomp(seu, return_input = FALSE, assay = "RNA", slot = "counts")

########################
# SingleCellExperiment #
########################
library(SingleCellExperiment)
set.seed(1234)

# Simulate counts
cnts <- mapply(function(x){rpois(n = 500, lambda = x)},
               x = sample(1:20, 50, replace = TRUE))
rownames(cnts) <- paste0("gene_", 1:nrow(cnts))
colnames(cnts) <- paste0("cell_", 1:ncol(cnts))
logcnts <- log2(cnts + 1)

# Create SingleCellExperiment object
sce <- SingleCellExperiment(assays=list(counts=cnts, logcounts=logcnts))

# run CA and save in dim. reduction slot.
sce <- cacomp(sce, return_input = TRUE, assay = "counts") # on counts
sce <- cacomp(sce, return_input = TRUE, assay = "logcounts") # on logcounts

# run CA and return cacomp object.
ca <- cacomp(sce, return_input = FALSE, assay = "counts")
}
